<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>s1 on</title><link>https://deuxfois.github.io/quartz/tags/s1/</link><description>Recent content in s1 on</description><generator>Hugo -- gohugo.io</generator><language>fr-fr</language><atom:link href="https://deuxfois.github.io/quartz/tags/s1/index.xml" rel="self" type="application/rss+xml"/><item><title>0. Java OOP</title><link>https://deuxfois.github.io/quartz/Master/Programmation-multi-paradigme/0.-Java-OOP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Programmation-multi-paradigme/0.-Java-OOP/</guid><description>Encapsulation Definition Wrapping the fields (state) and methods (behaviors) together as a single unit in a way that sensitive data are hidden from the users.</description></item><item><title>1. Ordonnancement des Processus</title><link>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Ordonnancement-des-Processus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Ordonnancement-des-Processus/</guid><description>Definition Un processus est un programme en exécution, un fichier binaire chargé et lancé. Lors de l’exécution chaque processus est associé à un contexte d’exécution.</description></item><item><title>1. Introduction</title><link>https://deuxfois.github.io/quartz/Master/Graphisme/Introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Graphisme/Introduction/</guid><description>creation, storage and manipulation of models (biological, mathematical, artistic or abstract structures) and images
Animation Pipeline = 3 steps: modeling, animating, rendering Interactive vs Batch Computer Graphics Interactive Computer Graphics Control of content, structure and appearance of objects via rapid visual feedback Components Input (mouse, stylus, multi-touch, body…)</description></item><item><title>1. Introduction</title><link>https://deuxfois.github.io/quartz/Master/Programmation-multi-paradigme/1.-Introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Programmation-multi-paradigme/1.-Introduction/</guid><description>Péocupation fonctionnalité test compléxité Extensibilité si je veux rajouter une fonctionnalité, est-ce que je dois tout modifier Modularité si je modifie un fichier, est-ce que ca a une conséquence pour les autres fichiers ?</description></item><item><title>2. Drawing 2D primitives</title><link>https://deuxfois.github.io/quartz/Master/Graphisme/Drawing-2D-primitives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Graphisme/Drawing-2D-primitives/</guid><description>Models are mathematical descriptions of geometric elements called primitives lines and segments
polygons: quads (2 triangles), triangles, &amp;hellip;</description></item><item><title>2. Java5</title><link>https://deuxfois.github.io/quartz/Master/Programmation-multi-paradigme/2.-Java5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Programmation-multi-paradigme/2.-Java5/</guid><description>Java 5 : Généricité Méthode qui s’applique sur n’importe quel type
une méthode par type et par collection type primitifs objets Polymorphisme collections ArrayList contient des Objects 1 2 3 ist list = new ArrayList(); list.</description></item><item><title>2.1 2D Drawing</title><link>https://deuxfois.github.io/quartz/Master/Graphisme/2D-Drawing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Graphisme/2D-Drawing/</guid><description>LINE DRAWING Given the specification for a straight line, find the collection of addressable pixels which most closely approximates this line.</description></item><item><title>3. 2D TRANSFORMATIONS AND MATRICES</title><link>https://deuxfois.github.io/quartz/Master/Graphisme/2D-TRANSFORMATIONS-AND-MATRICES/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Graphisme/2D-TRANSFORMATIONS-AND-MATRICES/</guid><description>Special cases of 2D Transformations: Scale matrix sx 0 0 0 sy 0 0 0 1 What if sx and/ or sy &amp;lt; 0 ?</description></item><item><title>3. JAVA 8</title><link>https://deuxfois.github.io/quartz/Master/Programmation-multi-paradigme/3.-JAVA-8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Programmation-multi-paradigme/3.-JAVA-8/</guid><description>Lambda Expression 1 2 (int a) -&amp;gt; a * 2; // Calculate the double of a a -&amp;gt; a * 2; // or simply without type 1 (a, b) -&amp;gt; a + b; // Sum of 2 parameters If the lambda is more than one expression we can use { } and return</description></item><item><title>3.1 Three-Dimensional Graphics</title><link>https://deuxfois.github.io/quartz/Master/Graphisme/Three-Dimensional-Graphics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Graphisme/Three-Dimensional-Graphics/</guid><description>We will use a right-handed coordinate system.
Left-handed suitable to screens.
To transform from right to left, negate the z values.</description></item><item><title>6. Surface Model</title><link>https://deuxfois.github.io/quartz/Master/Graphisme/Surface-Model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Graphisme/Surface-Model/</guid><description>Polygonal Surfaces Set of flat geometric primitives (quads, triangles) 3 vertices define a plane ax + by + cz + d = 0</description></item><item><title>6283. Lighting</title><link>https://deuxfois.github.io/quartz/Master/Graphisme/Lighting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Graphisme/Lighting/</guid><description>Basic Lighting Lighting in the real world is extremely complicated and depends on way too many factors, something we can&amp;rsquo;t afford to calculate on the limited processing power we have.</description></item><item><title>7 Rendering Pipeline Overview</title><link>https://deuxfois.github.io/quartz/Master/Graphisme/Rendering-Pipeline-Overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Graphisme/Rendering-Pipeline-Overview/</guid><description>Pipeline
Diagram of the Rendering Pipeline. The blue boxes are programmable shader stages.
The OpenGL rendering pipeline is initiated when you perform a rendering operation.</description></item><item><title>Bases de données : quelles protections ?</title><link>https://deuxfois.github.io/quartz/Master/Droit/Bases-de-donn%C3%A9es-quelles-protections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Droit/Bases-de-donn%C3%A9es-quelles-protections/</guid><description>La protection du contenu de la base de données Outre la structure de la base de données, son contenu peut également faire l’objet d’une protection particulière, sui generis, par le droit de la propriété intellectuelle.</description></item><item><title>Consomme</title><link>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/C/Consomme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/C/Consomme/</guid><descriptioninclude &amp;lt;unistd.</description></item><item><title>Droit d'auteur et protection des créations numériques</title><link>https://deuxfois.github.io/quartz/Master/Droit/Droit-auteur-et-protection-num%C3%A9rique/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Droit/Droit-auteur-et-protection-num%C3%A9rique/</guid><description>Œuvres protégées : La protection par droit d’auteur s’applique à toutes les œuvres de l’esprit quels qu’en soient le genre, la forme d’expression, le mérite ou la destination : œuvres littéraires, musicales, audiovisuelles, publicitaires, photographiques, mais aussi bases de données, sites Internet (=site web), blogs.</description></item><item><title>Exercices</title><link>https://deuxfois.github.io/quartz/Master/Graphisme/Exercices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Graphisme/Exercices/</guid><description>Concepts you should understand and be able to explain Chapitre 0 - Introduction Computer graphics Animation Modeling Rendering Graphics system Primitives Object/local coordinates World coordinates Screen coordinates Hierarchical scene modeling Scenegraph Chapitre 1 - Drawing 2D Primitives Rasterization Scan conversion Clipping (Cohen-Sutherland) Aliasing Parametric equations of a line Cosmetic pattern Geometric pattern Chapitre 2 - Geometrical Transformations Vector, unit vector Vector dot product Vector cross product Matrix multiplication Matrix inversion 2D and 3D Homogeneous coordinates (Affine) Transformations Translation/Rotation/Scale/Shear Composite transformations Fixed-point transformations Transformation of points Transformation of coordinate systems Rotation about an arbitrary axis Chapitre 3 - Viewing in 3D Modeling transformation Viewing transformation Projection transformation Window-to-viewport transformation Aspect ratio Parallel vs.</description></item><item><title>geeksForgeeksleS</title><link>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/usefull-links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/usefull-links/</guid><description>https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=lbp
y’a trop de pages pr moi</description></item><item><title>Java Versions and Features</title><link>https://deuxfois.github.io/quartz/Master/Programmation-multi-paradigme/Java-Versions-and-Features/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Programmation-multi-paradigme/Java-Versions-and-Features/</guid><description>Version Year Features added JDK Beta 1995 JDK 1.</description></item><item><title>Les types d'entreprises</title><link>https://deuxfois.github.io/quartz/Master/Droit/Les-types-entreprises/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Droit/Les-types-entreprises/</guid><description>a) L’entreprise individuelle Son existence en droit repose sur la personnalité juridique du propriétaire : l’entrepreneur individuel. Le patrimoine de l’entrepreneur et celui de l’entreprise se confondent.</description></item><item><title>Linux Process States and Signals</title><link>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Linux-States-Signals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Linux-States-Signals/</guid><description>Linux Process States and Signals When troubleshooting a system, it’s important to understand the process life-cycle and how the scheduler divides the CPU cores between the running processes and how the kernel communicates with process and how the processes communicate among themselves.</description></item><item><title>Modern Java</title><link>https://deuxfois.github.io/quartz/Master/Programmation-multi-paradigme/Modern-Java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Programmation-multi-paradigme/Modern-Java/</guid><description>Resources Java 8 Javadoc Java SE8 for the Really Impatient: A Short Course on the Basics by Cay S.</description></item><item><title>Reader Writer</title><link>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Java/Reader-Writer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Java/Reader-Writer/</guid><description>Producer.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public class Producer implements Runnable { private Message msg; public Producer(Message msg) { this.</description></item><item><title>Reader/writer</title><link>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/C/Reader-Writer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/C/Reader-Writer/</guid><descriptioninclude &amp;lt;unistd.</description></item><item><title>ReentrantLock</title><link>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Java/ReentrantLock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Java/ReentrantLock/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class ReentrantLock { private final Object sync = new Object(); // private monitor private Thread lockedBy = null; // null =&amp;gt; unlocked private int lockCount = 0; public void lock() throws InterruptedException { synchronized (sync) { while (lockedBy !</description></item><item><title>Scala</title><link>https://deuxfois.github.io/quartz/Master/Programmation-multi-paradigme/Scala/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Programmation-multi-paradigme/Scala/</guid><description>Evaluation Rules 1 2 3 4 5 6 7 def example = 2 // evaluated when called val example = 2 // evaluated immediately lazy val example = 2 // evaluated once when needed def square(x: Double) // call by value def square(x: =&amp;gt; Double) // call by name def myFct(bindings: Int*) { .</description></item><item><title>Simplest Galaxy renderer</title><link>https://deuxfois.github.io/quartz/Master/Graphisme/Simplest-Galaxy-renderer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Graphisme/Simplest-Galaxy-renderer/</guid><description>Simplest Galaxy renderer INF2110 - Introduction à l’Informatique Graphique
**Philippe Kévin**kv.philippe@gmail.comUniversité Bretagne Sud Usage compile make -f Makefile outputName</description></item><item><title>Synthese</title><link>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Synthese/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Synthese/</guid><description/></item><item><title>Tutoriel : Les shaders en GLSL</title><link>https://deuxfois.github.io/quartz/Master/Graphisme/Tutoriel-_-Les-shaders-en-GLSL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Graphisme/Tutoriel-_-Les-shaders-en-GLSL/</guid><description>Les shaders en GLSL Bonjour à tous ! :)
Vous êtes-vous jamais demandé comment étaient faits les superbes effets 3D à la mode comme on en voit dans les jeux vidéos récents, comme par exemple l’eau, l’HDR ou l’effet de flou de vitesse dans les jeux de voiture ?</description></item><item><title>Understanding Processes on Linux</title><link>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Processes-Linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Processes-Linux/</guid><description>Linux Processes Basics In short, processes are running programs on your Linux host that perform operations such as writing to a disk, writing to a file, or running a web server for example.</description></item><item><title>Understanding Threads in Java.</title><link>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Threads-Java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Threads-Java/</guid><description>Thread Life Cycle (image:baeldung.com)
In the life cycle, there are 7 states. lets discuss about them,
New This the state where the thread is created.</description></item></channel></rss>