<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>multi-paradigme on</title><link>https://deuxfois.github.io/quartz/tags/multi-paradigme/</link><description>Recent content in multi-paradigme on</description><generator>Hugo -- gohugo.io</generator><language>fr-fr</language><atom:link href="https://deuxfois.github.io/quartz/tags/multi-paradigme/index.xml" rel="self" type="application/rss+xml"/><item><title>0. Java OOP</title><link>https://deuxfois.github.io/quartz/master/programmation-multi-paradigme/java-oop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/master/programmation-multi-paradigme/java-oop/</guid><description>Encapsulation Definition Wrapping the fields (state) and methods (behaviors) together as a single unit in a way that sensitive data are hidden from the users.</description></item><item><title>1. Introduction</title><link>https://deuxfois.github.io/quartz/master/programmation-multi-paradigme/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/master/programmation-multi-paradigme/introduction/</guid><description>Péocupation fonctionnalité test compléxité Extensibilité si je veux rajouter une fonctionnalité, est-ce que je dois tout modifier Modularité si je modifie un fichier, est-ce que ca a une conséquence pour les autres fichiers ?</description></item><item><title>2. Java5</title><link>https://deuxfois.github.io/quartz/master/programmation-multi-paradigme/java-5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/master/programmation-multi-paradigme/java-5/</guid><description>Java 5 : Généricité Méthode qui s’applique sur n’importe quel type
une méthode par type et par collection type primitifs objets Polymorphisme collections ArrayList contient des Objects 1 2 3 ist list = new ArrayList(); list.</description></item><item><title>3. JAVA 8</title><link>https://deuxfois.github.io/quartz/master/programmation-multi-paradigme/java-8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/master/programmation-multi-paradigme/java-8/</guid><description>Lambda Expression 1 2 (int a) -&amp;gt; a * 2; // Calculate the double of a a -&amp;gt; a * 2; // or simply without type 1 (a, b) -&amp;gt; a + b; // Sum of 2 parameters If the lambda is more than one expression we can use { } and return</description></item><item><title>Java Versions and Features</title><link>https://deuxfois.github.io/quartz/master/programmation-multi-paradigme/java-all-versions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/master/programmation-multi-paradigme/java-all-versions/</guid><description>Version Year Features added JDK Beta 1995 JDK 1.</description></item><item><title>Modern Java</title><link>https://deuxfois.github.io/quartz/master/programmation-multi-paradigme/modern-java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/master/programmation-multi-paradigme/modern-java/</guid><description>Resources Java 8 Javadoc Java SE8 for the Really Impatient: A Short Course on the Basics by Cay S.</description></item><item><title>Scala</title><link>https://deuxfois.github.io/quartz/master/programmation-multi-paradigme/scala/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/master/programmation-multi-paradigme/scala/</guid><description>Evaluation Rules 1 2 3 4 5 6 7 def example = 2 // evaluated when called val example = 2 // evaluated immediately lazy val example = 2 // evaluated once when needed def square(x: Double) // call by value def square(x: =&amp;gt; Double) // call by name def myFct(bindings: Int*) { .</description></item></channel></rss>