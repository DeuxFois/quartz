<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>behavioral on</title><link>https://quartz.jzhao.xyz/tags/behavioral/</link><description>Recent content in behavioral on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://quartz.jzhao.xyz/tags/behavioral/index.xml" rel="self" type="application/rss+xml"/><item><title>Chaîne de responsabilité / Chain of Responsibility</title><link>https://quartz.jzhao.xyz/Architecture/Design_Pattern/Behavioral/Chaine_de_responsabilite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://quartz.jzhao.xyz/Architecture/Design_Pattern/Behavioral/Chaine_de_responsabilite/</guid><description>Chaîne de responsabilité permet de faire circuler des demandes dans une chaîne de handlers. Lorsqu’un handler reçoit une demande, il décide de la traiter ou de l’envoyer au handler suivant de la chaîne.</description></item><item><title>Commande / Command</title><link>https://quartz.jzhao.xyz/Architecture/Design_Pattern/Behavioral/Commande/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://quartz.jzhao.xyz/Architecture/Design_Pattern/Behavioral/Commande/</guid><description>Commande prend une action à effectuer et la transforme en un objet autonome qui contient tous les détails de cette action.</description></item><item><title>Itérateur / Iterator</title><link>https://quartz.jzhao.xyz/Architecture/Design_Pattern/Behavioral/Iterateur/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://quartz.jzhao.xyz/Architecture/Design_Pattern/Behavioral/Iterateur/</guid><description>Itérateur permet de parcourir les éléments d’une collection sans révéler sa représentation interne (liste, pile, arbre, etc.).
Problème Les collections ne servent que de conteneur pour un groupe d’objets, mais elles demeurent l’un des types de données les plus utilisés en programmation.</description></item><item><title>Médiateur / Mediator</title><link>https://quartz.jzhao.xyz/Architecture/Design_Pattern/Behavioral/Mediateur/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://quartz.jzhao.xyz/Architecture/Design_Pattern/Behavioral/Mediateur/</guid><description>Médiateur diminue les dépendances chaotiques entre les objets. Il restreint les communications directes entre les objets et les force à collaborer uniquement via un objet médiateur.</description></item><item><title>Mémento / Memento</title><link>https://quartz.jzhao.xyz/Architecture/Design_Pattern/Behavioral/Memento/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://quartz.jzhao.xyz/Architecture/Design_Pattern/Behavioral/Memento/</guid><description>Mémento permet de sauvegarder et de rétablir l’état précédent d’un objet sans révéler les détails de son implémentation.
Problème Imaginez que vous êtes en train de créer un éditeur de texte.</description></item><item><title>Observateur / Observer</title><link>https://quartz.jzhao.xyz/Architecture/Design_Pattern/Behavioral/Observateur/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://quartz.jzhao.xyz/Architecture/Design_Pattern/Behavioral/Observateur/</guid><description>L’Observateur permet de mettre en place un mécanisme de souscription pour envoyer des notifications à plusieurs objets, au sujet d’événements concernant les objets qu’ils observent.</description></item><item><title>Patron de méthode / Template Method</title><link>https://quartz.jzhao.xyz/Architecture/Design_Pattern/Behavioral/Patron_de_methode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://quartz.jzhao.xyz/Architecture/Design_Pattern/Behavioral/Patron_de_methode/</guid><description>Patron de Méthode permet de mettre le squelette d’un algorithme dans la classe mère, mais laisse les sous-classes redéfinir certaines étapes de l’algorithme sans changer sa structure.</description></item><item><title>Stratégie / Strategy</title><link>https://quartz.jzhao.xyz/Architecture/Design_Pattern/Behavioral/Strategie/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://quartz.jzhao.xyz/Architecture/Design_Pattern/Behavioral/Strategie/</guid><description>Stratégie permet de définir une famille d’algorithmes, de les mettre dans des classes séparées et de rendre leurs objets interchangeables.</description></item><item><title>Visiteur / Visitor</title><link>https://quartz.jzhao.xyz/Architecture/Design_Pattern/Behavioral/Visiteur/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://quartz.jzhao.xyz/Architecture/Design_Pattern/Behavioral/Visiteur/</guid><description>Visiteur vous permet de séparer les algorithmes et les objets sur lesquels ils opèrent.
Problème Imaginez que votre équipe développe une application avec des informations géographiques qui prennent la forme d’un graphe géant.</description></item><item><title>État / State</title><link>https://quartz.jzhao.xyz/Architecture/Design_Pattern/Behavioral/Etat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://quartz.jzhao.xyz/Architecture/Design_Pattern/Behavioral/Etat/</guid><description>État permet de modifier le comportement d’un objet lorsque son état interne change. L’objet donne l’impression qu’il change de classe.</description></item></channel></rss>