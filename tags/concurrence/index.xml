<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>concurrence on</title><link>https://deuxfois.github.io/quartz/tags/concurrence/</link><description>Recent content in concurrence on</description><generator>Hugo -- gohugo.io</generator><language>fr-fr</language><atom:link href="https://deuxfois.github.io/quartz/tags/concurrence/index.xml" rel="self" type="application/rss+xml"/><item><title>1. Ordonnancement des Processus</title><link>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Ordonnancement-des-Processus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Ordonnancement-des-Processus/</guid><description>Definition Un processus est un programme en exécution, un fichier binaire chargé et lancé. Lors de l’exécution chaque processus est associé à un contexte d’exécution.</description></item><item><title>Consomme</title><link>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/C/Consomme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/C/Consomme/</guid><descriptioninclude &amp;lt;unistd.</description></item><item><title>geeksForgeeksleS</title><link>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/usefull-links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/usefull-links/</guid><description>https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=lbp
y’a trop de pages pr moi</description></item><item><title>Linux Process States and Signals</title><link>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Linux-States-Signals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Linux-States-Signals/</guid><description>Linux Process States and Signals When troubleshooting a system, it’s important to understand the process life-cycle and how the scheduler divides the CPU cores between the running processes and how the kernel communicates with process and how the processes communicate among themselves.</description></item><item><title>Reader Writer</title><link>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Java/Reader-Writer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Java/Reader-Writer/</guid><description>Producer.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public class Producer implements Runnable { private Message msg; public Producer(Message msg) { this.</description></item><item><title>Reader/writer</title><link>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/C/Reader-Writer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/C/Reader-Writer/</guid><descriptioninclude &amp;lt;unistd.</description></item><item><title>ReentrantLock</title><link>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Java/ReentrantLock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Java/ReentrantLock/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class ReentrantLock { private final Object sync = new Object(); // private monitor private Thread lockedBy = null; // null =&amp;gt; unlocked private int lockCount = 0; public void lock() throws InterruptedException { synchronized (sync) { while (lockedBy !</description></item><item><title>Synthese</title><link>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Synthese/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Synthese/</guid><description/></item><item><title>Understanding Processes on Linux</title><link>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Processes-Linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Processes-Linux/</guid><description>Linux Processes Basics In short, processes are running programs on your Linux host that perform operations such as writing to a disk, writing to a file, or running a web server for example.</description></item><item><title>Understanding Threads in Java.</title><link>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Threads-Java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Concurrence-dans-les-syst%C3%A8mes/Threads-Java/</guid><description>Thread Life Cycle (image:baeldung.com)
In the life cycle, there are 7 states. lets discuss about them,
New This the state where the thread is created.</description></item></channel></rss>