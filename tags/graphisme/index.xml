<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>graphisme on</title><link>https://deuxfois.github.io/quartz/tags/graphisme/</link><description>Recent content in graphisme on</description><generator>Hugo -- gohugo.io</generator><language>fr-fr</language><atom:link href="https://deuxfois.github.io/quartz/tags/graphisme/index.xml" rel="self" type="application/rss+xml"/><item><title>1. Introduction</title><link>https://deuxfois.github.io/quartz/Master/Graphisme/Introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Graphisme/Introduction/</guid><description>creation, storage and manipulation of models (biological, mathematical, artistic or abstract structures) and images
Animation Pipeline = 3 steps: modeling, animating, rendering Interactive vs Batch Computer Graphics Interactive Computer Graphics Control of content, structure and appearance of objects via rapid visual feedback Components Input (mouse, stylus, multi-touch, body…)</description></item><item><title>2. Drawing 2D primitives</title><link>https://deuxfois.github.io/quartz/Master/Graphisme/Drawing-2D-primitives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Graphisme/Drawing-2D-primitives/</guid><description>Models are mathematical descriptions of geometric elements called primitives lines and segments
polygons: quads (2 triangles), triangles, &amp;hellip;</description></item><item><title>2.1 2D Drawing</title><link>https://deuxfois.github.io/quartz/Master/Graphisme/2D-Drawing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Graphisme/2D-Drawing/</guid><description>LINE DRAWING Given the specification for a straight line, find the collection of addressable pixels which most closely approximates this line.</description></item><item><title>3. 2D TRANSFORMATIONS AND MATRICES</title><link>https://deuxfois.github.io/quartz/Master/Graphisme/2D-TRANSFORMATIONS-AND-MATRICES/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Graphisme/2D-TRANSFORMATIONS-AND-MATRICES/</guid><description>Special cases of 2D Transformations: Scale matrix sx 0 0 0 sy 0 0 0 1 What if sx and/ or sy &amp;lt; 0 ?</description></item><item><title>3.1 Three-Dimensional Graphics</title><link>https://deuxfois.github.io/quartz/Master/Graphisme/Three-Dimensional-Graphics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Graphisme/Three-Dimensional-Graphics/</guid><description>We will use a right-handed coordinate system.
Left-handed suitable to screens.
To transform from right to left, negate the z values.</description></item><item><title>6. Surface Model</title><link>https://deuxfois.github.io/quartz/Master/Graphisme/Surface-Model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Graphisme/Surface-Model/</guid><description>Polygonal Surfaces Set of flat geometric primitives (quads, triangles) 3 vertices define a plane ax + by + cz + d = 0</description></item><item><title>6283. Lighting</title><link>https://deuxfois.github.io/quartz/Master/Graphisme/Lighting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Graphisme/Lighting/</guid><description>Basic Lighting Lighting in the real world is extremely complicated and depends on way too many factors, something we can&amp;rsquo;t afford to calculate on the limited processing power we have.</description></item><item><title>7 Rendering Pipeline Overview</title><link>https://deuxfois.github.io/quartz/Master/Graphisme/Rendering-Pipeline-Overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Graphisme/Rendering-Pipeline-Overview/</guid><description>Pipeline
Diagram of the Rendering Pipeline. The blue boxes are programmable shader stages.
The OpenGL rendering pipeline is initiated when you perform a rendering operation.</description></item><item><title>Exercices</title><link>https://deuxfois.github.io/quartz/Master/Graphisme/Exercices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Graphisme/Exercices/</guid><description>Concepts you should understand and be able to explain Chapitre 0 - Introduction Computer graphics Animation Modeling Rendering Graphics system Primitives Object/local coordinates World coordinates Screen coordinates Hierarchical scene modeling Scenegraph Chapitre 1 - Drawing 2D Primitives Rasterization Scan conversion Clipping (Cohen-Sutherland) Aliasing Parametric equations of a line Cosmetic pattern Geometric pattern Chapitre 2 - Geometrical Transformations Vector, unit vector Vector dot product Vector cross product Matrix multiplication Matrix inversion 2D and 3D Homogeneous coordinates (Affine) Transformations Translation/Rotation/Scale/Shear Composite transformations Fixed-point transformations Transformation of points Transformation of coordinate systems Rotation about an arbitrary axis Chapitre 3 - Viewing in 3D Modeling transformation Viewing transformation Projection transformation Window-to-viewport transformation Aspect ratio Parallel vs.</description></item><item><title>Simplest Galaxy renderer</title><link>https://deuxfois.github.io/quartz/Master/Graphisme/Simplest-Galaxy-renderer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Graphisme/Simplest-Galaxy-renderer/</guid><description>Simplest Galaxy renderer INF2110 - Introduction à l’Informatique Graphique
**Philippe Kévin**kv.philippe@gmail.comUniversité Bretagne Sud Usage compile make -f Makefile outputName</description></item><item><title>Tutoriel : Les shaders en GLSL</title><link>https://deuxfois.github.io/quartz/Master/Graphisme/Tutoriel-_-Les-shaders-en-GLSL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Master/Graphisme/Tutoriel-_-Les-shaders-en-GLSL/</guid><description>Les shaders en GLSL Bonjour à tous ! :)
Vous êtes-vous jamais demandé comment étaient faits les superbes effets 3D à la mode comme on en voit dans les jeux vidéos récents, comme par exemple l’eau, l’HDR ou l’effet de flou de vitesse dans les jeux de voiture ?</description></item></channel></rss>