<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>création on</title><link>https://deuxfois.github.io/quartz/tags/cr%C3%A9ation/</link><description>Recent content in création on</description><generator>Hugo -- gohugo.io</generator><language>fr-fr</language><atom:link href="https://deuxfois.github.io/quartz/tags/cr%C3%A9ation/index.xml" rel="self" type="application/rss+xml"/><item><title>Fabrique / Factory Method</title><link>https://deuxfois.github.io/quartz/Architecture/Design_Pattern/Creation/Fabrique/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design_Pattern/Creation/Fabrique/</guid><description>Fabrique définit une interface pour créer des objets dans une classe mère, mais délègue le choix des types d’objets à créer aux sous-classes.</description></item><item><title>Fabrique abstraite / Abstract Factory</title><link>https://deuxfois.github.io/quartz/Architecture/Design_Pattern/Creation/Fabrique_abstraite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design_Pattern/Creation/Fabrique_abstraite/</guid><description>Fabrique abstraite permet de créer des familles d’objets apparentés sans préciser leur classe concrète.
Problème Imaginons la création d’un simulateur pour un magasin de meubles.</description></item><item><title>Monteur / Builder</title><link>https://deuxfois.github.io/quartz/Architecture/Design_Pattern/Creation/Monteur/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design_Pattern/Creation/Monteur/</guid><description>Monteur permet de construire des objets complexes étape par étape. Il permet de produire différentes variations ou représentations d’un objet en utilisant le même code de construction.</description></item><item><title>Prototype</title><link>https://deuxfois.github.io/quartz/Architecture/Design_Pattern/Creation/Prototype/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design_Pattern/Creation/Prototype/</guid><description>Prototype crée de nouveaux objets à partir d’objets existants sans rendre le code dépendant de leur classe.
Problème Nous voulons une copie exacte d’un objet.</description></item><item><title>Singleton</title><link>https://deuxfois.github.io/quartz/Architecture/Design_Pattern/Creation/Singleton/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design_Pattern/Creation/Singleton/</guid><description>Singleton qui garantit que l’instance d’une classe n’existe qu’en un seul exemplaire, tout en fournissant un point d’accès global à cette instance.</description></item></channel></rss>