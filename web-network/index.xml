<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web-networks on</title><link>https://deuxfois.github.io/quartz/web-network/</link><description>Recent content in Web-networks on</description><generator>Hugo -- gohugo.io</generator><language>fr-fr</language><atom:link href="https://deuxfois.github.io/quartz/web-network/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/</guid><description>centring a div
flexbox
pseudo-classes
Selectors Selector Description * All elements div Element .</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/advanced-animations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/advanced-animations/</guid><description>Animations in Webkit browsers Content Many Webkit browsers still use the -webkit-prefixed version of animations, keyframes, and transitions.
Until they fully adopt the standard version, it&amp;rsquo;s good practice to include both versions (unprefixed &amp;amp; webkit) in your code:</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/animations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/animations/</guid><description>Animation basics in CSS There are two main properties when it comes to animating : animation and keyframes.
animation : how an element should transition (duration, speed).</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/centring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/centring/</guid><description>Using Grid 1 2 3 4 #center { display: grid; place-content: center; } Using flexbox Use flexbox to center anything vertically:</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/features/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/features/</guid><description>Use SVG for icons Content Since SVG (Scalable Vector Graphics) scales well for all resolution types, it is useful for icons:</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/flexbox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/flexbox/</guid><description>flex-flow This is a shorthand for the flex-direction and flex-wrap properties, which together define the flex container’s main and cross axes.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/positioning-tips/cells/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/positioning-tips/cells/</guid><description>Controlling cellpadding and cellspacing in CSS Cellpadding refers to the space between the cell content and the cell wall, while, cellspacing refers to the space between table cells.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/positioning-tips/clearfix-for-layouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/positioning-tips/clearfix-for-layouts/</guid><description>Clearfix for layouts Use clearfix to make an element automatically clear its child elements, so there would be no need for additional markup :</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/positioning-tips/direction-column-reverse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/positioning-tips/direction-column-reverse/</guid><description>Direction : column-reverse In Flexbox, column-reverse enables users to arrange elements vertically in reverse order.
1 2 3 4 5 6 &amp;lt;div class=&amp;#34;parent&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;child-1&amp;#34;&amp;gt;Child 1&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;child-2&amp;#34;&amp;gt;Child 2&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;child-3&amp;#34;&amp;gt;Child 3&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;child-4&amp;#34;&amp;gt;Child 4&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 1 2 3 4 5 .</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/positioning-tips/equal-width-table-cells/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/positioning-tips/equal-width-table-cells/</guid><description>Equal width table cells Use table-layout: fixed to keep a table&amp;rsquo;s cells at equal width:
1 2 3 #second-table { table-layout: fixed; } This is how the table would look without the property:</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/positioning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/positioning/</guid><description>block-elements-characteristics
floating-elements
inline-block-elements-characteristics
inline-elements-characteristics
positioning-elements
clearfix-for-layouts
cells
direction-column-reverse
equal-width-table-cells</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/positioning/block-elements-characteristics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/positioning/block-elements-characteristics/</guid><description>Block Elements Characteristics A block element has the following characteristics:
It always begins on a new line Its height, line-height, top-margin and bottom-margin can be specified Its width defaults to 100% of its containing element, unless otherwise specified Examples of block elements include &amp;lt;div&amp;gt;, &amp;lt;p&amp;gt;, &amp;lt;h1&amp;gt;, &amp;lt;form&amp;gt;, &amp;lt;ul&amp;gt; and &amp;lt;li&amp;gt;.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/positioning/floating-elements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/positioning/floating-elements/</guid><description>Floating Elements Another way to position elements on page is with floats. This property allows elements to be positioned to the left or right side of the parent element.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/positioning/inline-block-elements-characteristics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/positioning/inline-block-elements-characteristics/</guid><description>Inline-block Elements Characteristics There aren&amp;rsquo;t any inline-block elements per se: they are inline elements that accept some block-specific properties.
With that being said, the inline-block behavior has the following characteristics:</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/positioning/inline-elements-characteristics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/positioning/inline-elements-characteristics/</guid><description>Inline Elements Characteristics An inline element has the following characteristics:
It begins on the same line as its siblings Its height, line-height, top-margin and bottom-margin can&amp;rsquo;t be changed Its width is as wide as the content and can&amp;rsquo;t be modified Examples of inline elements include &amp;lt;span&amp;gt;, &amp;lt;a&amp;gt;, &amp;lt;label&amp;gt;, &amp;lt;input&amp;gt;, &amp;lt;img&amp;gt;, &amp;lt;strong&amp;gt; and &amp;lt;em&amp;gt;.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/positioning/positioning-elements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/positioning/positioning-elements/</guid><description>Positioning Elements Now that you can tell how much space an element takes when rendered based on its properties, the next step is to position it in the page layout.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/pseudo-classes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/pseudo-classes/</guid><description>Introduction
drag-and-drop
empty-blank
highlight
hover
in-out-of-range
matches-pseudo-class
not
nth-child
pseudo</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/pseudo-classes/drag-and-drop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/pseudo-classes/drag-and-drop/</guid><description>Drag-and-Drop pseudo-class :drop The :drop selector allows styling of the drop zone (the place where the element is supposed to be dropped), during the time when the user is dragging (or carrying) the element to be dropped.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/pseudo-classes/empty-blank/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/pseudo-classes/empty-blank/</guid><description>:empty and :blank With :empty you can select an element based on there being no children in it, whether that be elements, text nodes, or even white space nodes.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/pseudo-classes/highlight/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/pseudo-classes/highlight/</guid><description>Highlight input forms using :focus pseudo-class Responsiveness can make the forms more user-friendly and easier to read.
The :focus pseudo-class allows us to target the form element that is clicked on.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/pseudo-classes/hover/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/pseudo-classes/hover/</guid><description>The hover Pseudo-Class One of the most versatile and used pseudo-classes is :hover. Whenever an element on a website reacts to the mouse pointer being on top of it, usually it is because of the :hover pseudo-class matching.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/pseudo-classes/in-out-of-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/pseudo-classes/in-out-of-range/</guid><description>The :in-range &amp;amp; :out-of-range Pseudo-Classes Another set of pseudo-classes that can be applied only to elements that have (and can take) a range limitation, such as &amp;lt;input&amp;gt;s, are :in-range and :out-of-range.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/pseudo-classes/Introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/pseudo-classes/Introduction/</guid><description>Required and optional pseudo classes Especially when creating a form, some fields in it are mandatory for user to complete.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/pseudo-classes/matches-pseudo-class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/pseudo-classes/matches-pseudo-class/</guid><description>Matches-any pseudo-class :is The :is pseudo-class allows the application of rules to groups of selectors.
1 2 3 p:is(.alert,.error,.warn){ color:red; } The above will make the text of all elements matching .</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/pseudo-classes/not/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/pseudo-classes/not/</guid><description>Use :not() to apply/unapply styles Rather than adding a border to a navigation bar, and then removing it for the last element:</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/pseudo-classes/nth-child/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/pseudo-classes/nth-child/</guid><description>The nth-child Property The basic usage of the nth-child pseudo-class is to select a single child of the targeted element, like so:</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/pseudo-classes/pseudo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/pseudo-classes/pseudo/</guid><description>Use pseudo-classes to describe a special state of an element Unlike regular classes, pseudo-classes are not specified in the HTML. They are preceded by a colon, for example a:hover.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/pseudo-elements/before-after/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/pseudo-elements/before-after/</guid><description>Styling elements with ::before &amp;amp; ::after Use the ::before selector to add and style content just before the first child of an element.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/pseudo-elements/first-letter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/pseudo-elements/first-letter/</guid><description>Drop caps with ::first-letter Using the ::first-line and ::first-letter pseudo elements that have been introduced in CSS1, a nice typographic effect like a drop cap can be achieved.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/css/pseudo-elements/selection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/css/pseudo-elements/selection/</guid><description>Change selected area color Highlighted text area colors can be easily change with the ::selection pseudo element.
Apply ::selection on a paragraph:</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/html/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/html/</guid><description>HTML Cheat Sheet A reminder of HTML elements.
Cheatsheet ![[Pasted image 20220804105558.png]] Minimal page 1 2 3 4 5 6 7 8 9 10 &amp;lt;!</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/http/</guid><description>HTTP Messages HTTP messages are how data is exchanged between a server and a client. There are two types of messages: http-request sent by the client to trigger an action on the server, and http-response, the answer from the server.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/http/http-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/http/http-2/</guid><description>The beginning oh HTTP/2 HTTP/2 has made some serious improvements with non-blocking downloads, pipelines and push servers that helped us overcome some of the limitations of the underlying TCP protocol.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/http/http-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/http/http-3/</guid><description>QUIC and HTTP/3 QUIC (Quick UDP Internet Connections) was first deployed by Google in 2012. It redefines the boundaries of the network layers by building on the lower-level UDP protocol, redefining the handshakes, reliability functions, and security functions in &amp;ldquo;user space,&amp;rdquo; thus avoiding the need to upgrade the kernels of Internet systems.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/http/http-request/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/http/http-request/</guid><description>HTTP Requests Start line HTTP requests are messages sent by the client to initiate an action on the server. Their start-line contain three elements:</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/http/http-response/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/http/http-response/</guid><description>HTTP Responses Status line The start line of an HTTP response, called the status line, contains the following information:
The protocol version, usually HTTP/1.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/http/Methods/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/http/Methods/</guid><description>KNOW YOUR HTTP methods WELL The request method token is the primary source of request semantics; it indicates the purpose for which the client has made this request and what is expected by the client as a successful result.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/http/Status-Codes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/http/Status-Codes/</guid><description>KNOW YOUR HTTP status codes WELL The status-code element is a 3-digit integer code giving the result of the attempt to understand and satisfy the request.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/modern-javascript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/modern-javascript/</guid><description>Notions Destructuring objects and arrays Destructuring is a convenient way of creating new variables by extracting some values from data stored in objects or arrays.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/node/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/node/</guid><description>Node introduction
Error Handling manage-error
verror
Events events
once
Pattern patterns</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/node/events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/node/events/</guid><description>Consuming events Node applications are event driven applications, an event occurs upon a change of state in an application, for example, a button being clicked, or data being inputted.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/node/handling-operational-errors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/node/handling-operational-errors/</guid><description>Handling Operational Errors There isn&amp;rsquo;t a single place in the application where errors can pop up, so you should be prepared to handle them wherever you are making a HTTP request, performing I/O operations, forking processes or validation input.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/node/handling-programmer-errors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/node/handling-programmer-errors/</guid><description>Handling Programmer Errors Programmer errors are bugs. Hence, they can&amp;rsquo;t and shouldn&amp;rsquo;t be handled. The only way to deal with them is to debug and fix the problem.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/node/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/node/introduction/</guid><description>What is NodeJS? Node.js is an extremely powerful JavaScript framework which was built upon Google Chrome’s V8 JavaScript engine. It provides an asynchronous, event driven, I/O based cross-platform runtime environment for the development of server-side JavaScript applications.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/node/manage-error/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/node/manage-error/</guid><description>First-error callbacks in Node The &amp;quot;error-first&amp;quot; callback (also &amp;ldquo;errorback&amp;rdquo; or &amp;ldquo;err-back&amp;rdquo;) has become the standard protocol for Node as to enable a balanced, non-blocking flow of control and processing power across applications and modules.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/node/once/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/node/once/</guid><description>Listening to events just once Events are actions that happen within your JavaScript application and are signaled by the system such that we can react to them.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/node/operational-vs-programmer-errors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/node/operational-vs-programmer-errors/</guid><description>Operational vs. Programmer Errors Errors in Node start off as scary. What if my server dies when there are hundreds of people connected?</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/node/patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/node/patterns/</guid><description>Factories design pattern In order to avoid custom object creation with different arguments, factories can be used instead. Their usage is obvious when working with complex constructors or you want to avoid copypasta.</description></item><item><title/><link>https://deuxfois.github.io/quartz/web-network/node/verror/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/node/verror/</guid><description>Wrapping Errors in Node.Js Using node-verror The module node-verror can be used to produce useful error messages in Node.js. It has two classes VError and WError.</description></item><item><title>MDN</title><link>https://deuxfois.github.io/quartz/web-network/MDN/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/web-network/MDN/</guid><description>Resources The following resources can help you better understand the concepts, elements, and APIs presented in this course.
HTML Overview doctype element Elements What is the difference between HTML tags and elements?</description></item></channel></rss>