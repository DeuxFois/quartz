<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Architectures on</title><link>https://deuxfois.github.io/quartz/architecture/</link><description>Recent content in Architectures on</description><generator>Hugo -- gohugo.io</generator><language>fr-fr</language><atom:link href="https://deuxfois.github.io/quartz/architecture/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Behavioral/Behavioral/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Behavioral/Behavioral/</guid><description>| notebook | image | excerpt |
| &amp;mdash; | &amp;mdash; | &amp;mdash; |
|üëÄBehavioral| | Commande prend une action √† effectuer et la transforme en un objet autonome qui contient tous les d√©tails de cette action.</description></item><item><title/><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Creation/Creation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Creation/Creation/</guid><description>| notebook | image | excerpt |
| &amp;mdash; | &amp;mdash; | &amp;mdash; |
|üé≠Cr√©ation| | Fabrique d√©finit une interface pour cr√©er des objets dans une classe m√®re, mais d√©l√®gue le choix des types d‚Äôobjets √† cr√©er aux sous-classes.</description></item><item><title/><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Pattern_Design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Pattern_Design/</guid><description>[[Creation]] Ces mod√®les fournissent divers m√©canismes de cr√©ation d&amp;rsquo;objets, qui augmentent la flexibilit√© et la r√©utilisation du code existant.
[[Structural]] Ces mod√®les expliquent comment assembler des objets et des classes dans des structures plus grandes tout en gardant ces structures flexibles et efficaces.</description></item><item><title/><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Structurel/Structural/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Structurel/Structural/</guid><description>| notebook | image | excerpt |
| &amp;mdash; | &amp;mdash; | &amp;mdash; |
|üè¶Structurel| | Composite permet d‚Äôagencer les objets dans des arborescences afin de pouvoir traiter celles-ci comme des objets individuels.</description></item><item><title>Cha√Æne de responsabilit√© / Chain of Responsibility</title><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Behavioral/Chaine_de_responsabilite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Behavioral/Chaine_de_responsabilite/</guid><description>Cha√Æne de responsabilit√© permet de faire circuler des demandes dans une cha√Æne de handlers. Lorsqu‚Äôun handler re√ßoit une demande, il d√©cide de la traiter ou de l‚Äôenvoyer au handler suivant de la¬†cha√Æne.</description></item><item><title>Commande / Command</title><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Behavioral/Commande/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Behavioral/Commande/</guid><description>Commande prend une action √† effectuer et la transforme en un objet autonome qui contient tous les d√©tails de cette action.</description></item><item><title>Composite / Composite</title><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Structurel/Composite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Structurel/Composite/</guid><description>Composite permet d‚Äôagencer les objets dans des arborescences afin de pouvoir traiter celles-ci comme des objets¬†individuels.
Probl√®me L‚Äôutilisation de ce patron doit √™tre r√©serv√©e aux applications dont la structure principale peut √™tre repr√©sent√©e sous la forme d‚Äôune arborescence.</description></item><item><title>D√©corateur / Decorator</title><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Structurel/Decorateur/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Structurel/Decorateur/</guid><description>D√©corateur permet d‚Äôaffecter dynamiquement de nouveaux comportements √† des objets en les pla√ßant dans des emballeurs qui impl√©mentent ces¬†comportements.</description></item><item><title>Fabrique / Factory Method</title><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Creation/Fabrique/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Creation/Fabrique/</guid><description>Fabrique d√©finit une interface pour cr√©er des objets dans une classe m√®re, mais d√©l√®gue le choix des types d‚Äôobjets √† cr√©er aux¬†sous-classes.</description></item><item><title>Fabrique abstraite / Abstract Factory</title><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Creation/Fabrique_abstraite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Creation/Fabrique_abstraite/</guid><description>Fabrique abstraite permet de cr√©er des familles d‚Äôobjets apparent√©s sans pr√©ciser leur classe¬†concr√®te.
Probl√®me Imaginons la cr√©ation d‚Äôun simulateur pour un magasin de meubles.</description></item><item><title>Fa√ßade / Facade</title><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Structurel/Fa%C3%A7ade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Structurel/Fa%C3%A7ade/</guid><description>Fa√ßade procure une interface offrant un acc√®s simplifi√© √† une librairie, un framework ou √† n‚Äôimporte quel ensemble complexe de¬†classes.</description></item><item><title>It√©rateur / Iterator</title><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Behavioral/Iterateur/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Behavioral/Iterateur/</guid><description>It√©rateur permet de parcourir les √©l√©ments d‚Äôune collection sans r√©v√©ler sa repr√©sentation interne (liste, pile, arbre,¬†etc.).
Probl√®me Les collections ne servent que de conteneur pour un groupe d‚Äôobjets, mais elles demeurent l‚Äôun des types de donn√©es les plus utilis√©s en programmation.</description></item><item><title>Monteur / Builder</title><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Creation/Monteur/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Creation/Monteur/</guid><description>Monteur permet de construire des objets complexes √©tape par √©tape. Il permet de produire diff√©rentes variations ou repr√©sentations d‚Äôun objet en utilisant le m√™me code de¬†construction.</description></item><item><title>M√©diateur / Mediator</title><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Behavioral/Mediateur/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Behavioral/Mediateur/</guid><description>M√©diateur diminue les d√©pendances chaotiques entre les objets. Il restreint les communications directes entre les objets et les force √† collaborer uniquement via un objet¬†m√©diateur.</description></item><item><title>M√©mento / Memento</title><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Behavioral/Memento/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Behavioral/Memento/</guid><description>M√©mento permet de sauvegarder et de r√©tablir l‚Äô√©tat pr√©c√©dent d‚Äôun objet sans r√©v√©ler les d√©tails de son¬†impl√©mentation.
Probl√®me Imaginez que vous √™tes en train de cr√©er un √©diteur de texte.</description></item><item><title>Observateur / Observer</title><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Behavioral/Observateur/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Behavioral/Observateur/</guid><description>L‚ÄôObservateur permet de mettre en place un m√©canisme de souscription pour envoyer des notifications √† plusieurs objets, au sujet d‚Äô√©v√©nements concernant les objets qu‚Äôils¬†observent.</description></item><item><title>Patron de m√©thode / Template Method</title><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Behavioral/Patron_de_methode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Behavioral/Patron_de_methode/</guid><description>Patron de M√©thode permet de mettre le squelette d‚Äôun algorithme dans la classe m√®re, mais laisse les sous-classes red√©finir certaines √©tapes de l‚Äôalgorithme sans changer sa¬†structure.</description></item><item><title>Poids mouche / Flyweight</title><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Structurel/Poids_mouche/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Structurel/Poids_mouche/</guid><description>Poids mouche est un patron de conception structurel qui permet de stocker plus d‚Äôobjets dans la RAM en partageant les √©tats similaires entre de multiples objets, plut√¥t que de stocker les donn√©es dans chaque¬†objet.</description></item><item><title>Pont / Bridge</title><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Structurel/Pont/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Structurel/Pont/</guid><description>Le Pont permet de s√©parer une grosse classe ou un ensemble de classes connexes en deux hi√©rarchies¬†‚Äî abstraction et impl√©mentation¬†‚Äî qui peuvent √©voluer ind√©pendamment l‚Äôune de¬†l‚Äôautre.</description></item><item><title>Procuration / Proxy</title><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Structurel/Procuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Structurel/Procuration/</guid><description>La Procuration qui vous permet d‚Äôutiliser un substitut pour un objet. Elle donne le contr√¥le sur l‚Äôobjet original, vous permettant d‚Äôeffectuer des manipulations avant ou apr√®s que la demande ne lui¬†parvienne.</description></item><item><title>Prototype</title><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Creation/Prototype/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Creation/Prototype/</guid><description>Prototype cr√©e de nouveaux objets √† partir d‚Äôobjets existants sans rendre le code d√©pendant de leur¬†classe.
Probl√®me Nous voulons une copie exacte d‚Äôun objet.</description></item><item><title>Singleton</title><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Creation/Singleton/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Creation/Singleton/</guid><description>Singleton qui garantit que l‚Äôinstance d‚Äôune classe n‚Äôexiste qu‚Äôen un seul exemplaire, tout en fournissant un point d‚Äôacc√®s global √† cette¬†instance.</description></item><item><title>Strat√©gie / Strategy</title><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Behavioral/Strategie/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Behavioral/Strategie/</guid><description>Strat√©gie permet de d√©finir une famille d‚Äôalgorithmes, de les mettre dans des classes s√©par√©es et de rendre leurs objets¬†interchangeables.</description></item><item><title>Visiteur / Visitor</title><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Behavioral/Visiteur/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Behavioral/Visiteur/</guid><description>Visiteur vous permet de s√©parer les algorithmes et les objets sur lesquels ils¬†op√®rent.
Probl√®me Imaginez que votre √©quipe d√©veloppe une application avec des informations g√©ographiques qui prennent la forme d‚Äôun graphe g√©ant.</description></item><item><title>√âtat / State</title><link>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Behavioral/Etat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://deuxfois.github.io/quartz/Architecture/Design-Pattern/Behavioral/Etat/</guid><description>√âtat permet de modifier le comportement d‚Äôun objet lorsque son √©tat interne change. L‚Äôobjet donne l‚Äôimpression qu‚Äôil change de¬†classe.</description></item></channel></rss>